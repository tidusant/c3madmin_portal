name: Dev deployment
env:
  SERVER: colis-dev
  DEPLOY_NAME: c3madmin-portal
  COMMIT_FILTER: DEPLOY
  SLACK_COMMAND: "curl -X POST -H 'Content-type: application/json' --data"
on:
  push:
    branches: [ master ]

jobs:
  check:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      isdeploy: ${{steps.check.outputs.isdeploy}}
      apppath: ${{steps.check.outputs.apppath}}  
      branch: ${{steps.check.outputs.branch}}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - id: check
        name: check is Deploy    
        run: |           
          echo ${GITHUB_EVENT_PATH}
          echo ${GITHUB_WORKSPACE}
          #Set branch name
          echo "::set-output name=branch::$(echo ${GITHUB_REF#refs/heads/})"
          # Get last commit message
          readonly local last_commit_log="${{github.event.head_commit.message}}"
          echo "last commit log: $last_commit_log"
          
          #readonly local result=$(echo "$last_commit_log" | grep -E "^${COMMIT_FILTER}" )
          readonly local result1=$(echo "$last_commit_log" | cut -d" " -f1 )
          readonly local result2=$(echo "$last_commit_log" | cut -d" " -f2 )

          if [ "$result1" == ${COMMIT_FILTER} ]; then            
            echo "the last commit log contains \"$COMMIT_FILTER\", start building"            
            echo "::set-output name=isdeploy::true"
            echo "::set-output name=apppath::$result2"
            ${SLACK_COMMAND} '{"text":"Start deploy ${DEPLOY_NAME} !"}' ${{secrets.SLACK_WEBHOOK_URL}}
          else            
            echo "not a DEPLOY command"
            echo "::set-output name=isdeploy::false"
          fi
  test:
    if: ${{ contains(needs.check.outputs.isdeploy, 'true') }}
    runs-on: ubuntu-latest
    container:
      image: ubuntu:latest
      options: --user 1001
    
    needs: check
    steps:

    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.15

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Test
      run: |
        ls
        cd ${{needs.check.outputs.apppath}}
        env SESSION_URI="${{ secrets.DEV_DB_URI }}" SESSION_DB="${{ secrets.DEV_DB_NAME }}" go test -v ./...
        ${SLACK_COMMAND} '{"text":"Testing Done!"}' ${{secrets.SLACK_WEBHOOK_URL}}

  build:
    if: ${{ contains(needs.check.outputs.isdeploy, 'true') }}
    runs-on: ubuntu-latest    
    needs: [check,test]
    steps:

    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.15

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    
    - name: Build
      run: env CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main .
      
    - name: Docker hub push
      run: |
        echo "====== Docker build ========"
        echo ${{ secrets.DOCKER_TOKEN }} | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin 
        docker build -t ${DEPLOY_NAME} .
        docker tag ${DEPLOY_NAME} ${{ secrets.DOCKER_USERNAME }}/${DEPLOY_NAME}
        docker push ${{ secrets.DOCKER_USERNAME }}/${DEPLOY_NAME}
        ${SLACK_COMMAND} '{"text":"Push to docker done!"}' ${{secrets.SLACK_WEBHOOK_URL}}
            
  deploy:
    if: ${{ contains(needs.check.outputs.isdeploy, 'true') }}
    # The type of runner that the job will run on
    runs-on: self-hosted
    needs: [check,build]
    steps:
    - name: Kubernetes delete secrect
      run: sudo kubectl -n ${SERVER} delete secret mysecret --ignore-not-found
    - name: Kubernetes create secrect
      run: sudo kubectl -n ${SERVER} create secret generic mysecret --from-literal=devdb_url='${{ secrets.DEV_DB_URI }}'   --from-literal=devdb_name='${{ secrets.DEV_DB_NAME }}' 
    - name: Kubernetes deploy
      run: |
        sudo kubectl apply -f https://raw.githubusercontent.com/${GITHUB_REPOSITORY}/${{needs.check.outputs.branch}}/k8s_devdeploy.yml
        #force pull latest image
        sudo kubectl -n ${SERVER} rollout restart deploy ${DEPLOY_NAME}
        ${SLACK_COMMAND} '{"text":"Kubernetes deploy done!"}' ${{secrets.SLACK_WEBHOOK_URL}}
   
